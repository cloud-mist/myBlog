<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 忆の風</title>
    <link>https://shawncheung.com/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 忆の風</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>shawn</copyright>
    <lastBuildDate>Fri, 22 Oct 2021 13:06:18 +0800</lastBuildDate><atom:link href="https://shawncheung.com/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang | 算法题的输入输出</title>
      <link>https://shawncheung.com/post/go-algio/</link>
      <pubDate>Fri, 22 Oct 2021 13:06:18 +0800</pubDate>
      
      <guid>https://shawncheung.com/post/go-algio/</guid>
      <description>「前言」  本篇分享介绍3个版本，层层递进 接下来以 Acwing796.子矩阵的和 为例  「题目」  题目：输入一个 $n$ 行 $m$ 列的整数矩阵，再输入 $q$ 个询问，每个询问包含四个整数 $x_1,y_1,x_2,y_2$，表示一个子矩阵的左上角坐标和右下角坐标。对于每个询问输出子矩阵中所有数的和。 输入：第一行包含三个整数 $n，m，q$。 接下来 $n$ 行，每行包含 $m$ 个整数，表示整数矩阵。 接下来 $q$ 行，每行包含四个整数 $x_1,y_1,x_2,y_2$，表示一组询问。
输出：共 $q$ 行，每行输出一个询问的结果。   「Ver. 1」 Use&amp;amp;Result  fmt.Scan() 和 fmt.Print()系列 Res：TLE  Code   package main import ( &amp;#34;fmt&amp;#34; ) const N = 1010 func main() { var n, m, q int fmt.Scan(&amp;amp;n, &amp;amp;m, &amp;amp;q) a := make([][N]int, N) for i := 1; i &amp;lt;= n; i++ { for j := 1; j &amp;lt;= m; j++ { fmt.</description>
    </item>
    
    <item>
      <title>Acg | 0x03</title>
      <link>https://shawncheung.com/post/acg-0x03/</link>
      <pubDate>Fri, 23 Jul 2021 18:32:02 +0800</pubDate>
      
      <guid>https://shawncheung.com/post/acg-0x03/</guid>
      <description>壹、介绍  前缀和：$O(1)$求某个区间或区域的和 差分 ：$O(1)$为某个连续区间或区域加一个固定的值  贰、模板 「一维前缀和」  Analyse   求一段区间的和 $$sum(l,r) = b[r]-b[l-1]$$   code
# input, 0位置存储0,从1开始存数 n,m=map(int, input().split()) a=[0] a.extend(list(map(int, input().split()))) b=[0]*(n+1) # 前缀和 for i in range(1,n+1): b[i] = b[i-1]+a[i] # output  while m: m-=1 l,r=map(int, input().split()) print(b[r]-b[l-1]) ``
  「二维前缀和」  Analyse    code # input n,m,q=map(int,input().split()) a=[[0 for i in range(m+1)] for j in range(n+1)] b=[[0 for i in range(m+1)] for j in range(n+1)] for i in range(1,n+1): temp=list(map(int, input().</description>
    </item>
    
    <item>
      <title>Acg | 0x04</title>
      <link>https://shawncheung.com/post/acg-0x04/</link>
      <pubDate>Thu, 22 Jul 2021 14:54:11 +0800</pubDate>
      
      <guid>https://shawncheung.com/post/acg-0x04/</guid>
      <description>一、整数二分 Explain  将模板分为二种情况,循环以l=r结束 看第一段，若$a[mid]&amp;gt;=x$,因为是单增序列，推出mid后面的数会更大，所以缩小区间为左半段,又mid也可能是答案，因此r=mid 为什么采用右移运算，而不是除法。右移是向下取整，整除是向零取整，在值域包含负数的时候后者没法正常工作。  Code   在单增序列a中查找$\geq{x}$中最小的那个
while l&amp;lt;r: mid=l+r&amp;gt;&amp;gt;1 if a[mid]&amp;gt;=x: r=mid else: l=mid+1   在a中找$\leq{x}$中最大的那个
while l&amp;lt;r: mid=l+r+1&amp;gt;&amp;gt;1 if a[mid]&amp;lt;=x: l=mid else: r=mid-1   Problems E1 数的范围
 topic   给定一个按照升序排列的长度为 n 的整数数组,以及q个查询。对于每个查询，返回一个元素 k 的起始位置和终止位置（位置从 0 开始计数）。如果数组中不存在该元素，则返回 -1 -1.  analyse   先用模板找起始位置，即最小的那个。 如果s[l]!=x,说明没找到，输出-1 -1即可， 否则，输出起始，再用模板找终止位置即可。  code n,q=map(int, input().split()) s=list(map(int, input().split())) while q: q-=1 x=int(input()) l,r=0,n-1 while l&amp;lt;r: mid =l+r&amp;gt;&amp;gt;1 if s[mid]&amp;gt;=x: r=mid else: l=mid+1 if s[l]!</description>
    </item>
    
  </channel>
</rss>
